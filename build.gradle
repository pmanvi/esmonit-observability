plugins {
	id 'org.springframework.boot' version '2.5.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'org.springframework.experimental.aot' version '0.10.0-SNAPSHOT'
}

group = 'esmonit'
version = '1.0'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	maven { url 'https://repo.spring.io/snapshot' }
	mavenCentral()
}

ext {
	set('springCloudVersion', "2020.0.3")
}

dependencies {
	// Spring Boot - Design Guidelines
	/**
	 Interfaces - How you can deliver your software.
	 Ex:REST, Swagger
	 Application - orchestration and the transactional scopes Ex: <some>Manager
	 Domain - bounded contexts, biz rules. Ex: Workflow, validations
	 Infrastructure - supporting for other layers.
	 Ex: SQL, i18n, Bulk, search
	 */
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation  'org.springframework.boot:spring-boot-starter-aop'

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// RDBMS and datastores -
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'mysql:mysql-connector-java'

	// Testing strategy - Using client libraries and options - RestAssured,
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'

	//EsMonit -elastic APM - Observability
	implementation group: 'co.elastic.apm', name: 'apm-agent-api', version: '1.24.0'
	implementation group: 'co.elastic.apm', name: 'apm-opentracing', version: '1.24.0'
	implementation group: 'io.opentracing.contrib', name: 'opentracing-spring-cloud-starter', version: '0.5.9'

	// Redis client
	//implementation group: 'org.redisson', name: 'redisson', version: '3.15.5'

	// Apparently adding this breaks without mongo service running.
	implementation group: 'io.opentracing.contrib', name: 'opentracing-mongo-driver', version: '0.1.5'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc', version: '2.5.0'

	// HttpClient Libraries Approach
	implementation group: 'com.squareup.retrofit2', name: 'retrofit', version: '2.9.0'
	implementation group: 'com.squareup.retrofit2', name: 'converter-gson', version: '2.9.0'
	implementation 'com.squareup.okhttp3:okhttp'
	implementation group: 'com.squareup.okio', name: 'okio', version: '2.10.0'

	// Performance Testing, Data generations, use # https://fastthread.io/ - thread analysis
	implementation group: 'com.github.javafaker', name: 'javafaker', version: '1.0.2'

	// Validations
	implementation group: 'io.doov', name: 'doov-core', version: '2.7.8'
	implementation group: 'io.doov', name: 'doov-generator-core', version: '2.7.8'

	// Java Class conversions/mapping - Its importance in Domain Drive Design
	implementation group: 'org.mapstruct', name: 'mapstruct', version: '1.4.2.Final'
	implementation group: 'org.mapstruct', name: 'mapstruct-processor', version: '1.4.2.Final'
	annotationProcessor "org.mapstruct:mapstruct-processor:1.4.2.Final"

	// Util libraries, Java Collections, Using them
	/**
	 For Existing projects (java 8 based)
	 â€œEventBus, lightweight cache, graphing, collection utilities
	 guava is the decent option if library already available.

	 For new one, prefer eclipse collections over JDK, Apache and google guava.
	 Stick to one and learn it well all are good.
	 */
	implementation group: 'com.google.guava', name: 'guava', version: '23.0'

	/**
	 *
	 Manage Fault tolerance.(say Resiliance4j)
	 Circuit-breaker -> failed attempts crosses threshold, eagerly reject all subsequent ones.
	 Bulkhead  -> limit the number of concurrent calls
	 Retry -> auto-retry of failed call
	 RateLimiter -> limiting access
	 */
	implementation group: 'io.github.resilience4j', name: 'resilience4j-reactor', version: '1.7.0'

	// swagger
	/**
	 RESTful API Design Guidelines
	 - Best Practices.
	 */
	implementation group: 'io.springfox', name: 'springfox-swagger2', version: '3.0.0'


}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform()
}

bootBuildImage {
	builder = 'paketobuildpacks/builder:tiny'
	environment = ['BP_NATIVE_IMAGE': 'true']
}
